AWSTemplateFormatVersion: "2010-09-09"
Description: Cloud Formation VPC
Parameters:
  VPCCidrBlock:
    Description: "The CIDR Block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  SubnetCidrBlock1:
    Type: String
    Default: "10.1.1.0/24"
  SubnetCidrBlock2:
    Type: String
    Default: "10.1.2.0/24"
  SubnetCidrBlock3:
    Type: String
    Default: "10.1.3.0/24"
  DestinationCidrBlock:
    Type: String
    Default: "0.0.0.0/0"
  AmiId:
    Type: String
    Default: "ami-033b95fb8079dc481"
  # AZone1:
  #   Type: String
  #   Default: "a"
  # AZone2:
  #   Type: String
  #   Default: "b"
  # AZone3:
  #   Type: String
  #   Default: "c"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCidrBlock1
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        !Select 
          - 0
          - !GetAZs     
            Ref: 'AWS::Region'
      # AvailabilityZone:
      #   !Join
      #     - ''
      #     - - !Ref AWS::Region
      #       - !Ref AZone1
      Tags:
      - Key: Name
        Value:
          !Join
            - ''
            - - !Ref AWS::StackName
              - '-az1'
  subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCidrBlock2
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        !Select 
          - 1
          - !GetAZs     
            Ref: 'AWS::Region'
      # AvailabilityZone:
      #   !Join
      #     - ''
      #     - - !Ref AWS::Region
      #       - !Ref AZone2
      Tags:
      - Key: Name
        Value:
          !Join
            - ''
            - - !Ref AWS::StackName
              - '-az2'
  subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCidrBlock3
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        !Select 
          - 2
          - !GetAZs     
            Ref: 'AWS::Region'
      # AvailabilityZone:
      #   !Join
      #     - ''
      #     - - !Ref AWS::Region
      #       - !Ref AZone3
      Tags:
      - Key: Name
        Value:
          !Join
            - ''
            - - !Ref AWS::StackName
              - '-az3'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          !Join
            - ''
            - - !Ref AWS::StackName
              - '-InternetGateway'
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          !Join
            - ''
            - - !Ref AWS::StackName
              - '-PublicRouteTable'
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - subnet1
      - PublicRouteTable
      - InternetGatewayAttachment
    Properties:
      SubnetId:
        Ref: subnet1
      RouteTableId:
        Ref: PublicRouteTable
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - subnet2
      - PublicRouteTable
      - InternetGatewayAttachment
    Properties:
      SubnetId:
        Ref: subnet2
      RouteTableId:
        Ref: PublicRouteTable
  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - subnet3
      - PublicRouteTable
      - InternetGatewayAttachment
    Properties:
      SubnetId:
        Ref: subnet3
      RouteTableId:
        Ref: PublicRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - InternetGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: !Ref DestinationCidrBlock
      GatewayId:
        Ref: InternetGateway
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web application security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3200'
          ToPort: '3200'
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-application-security-group'
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      SubnetId: !Ref subnet1
      SecurityGroupIds: [!Ref ApplicationSecurityGroup]
      DisableApiTermination: "false"
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "20"
      Tags:
      - Key: Name
        Value: !Sub 'EC2Instance-${AWS::StackName}'
Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
  SubnetId1:
    Description: Subnet ID 1
    Value: !Ref subnet1
  SubnetId2:
    Description: Subnet ID 2
    Value: !Ref subnet2
  SubnetId3:
    Description: Subnet ID 3
    Value: !Ref subnet3